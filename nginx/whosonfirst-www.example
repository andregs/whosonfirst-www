
map $upstream_http_access_control_allow_origin $acao_header {
  "*"     "";
  default "*";
}

server {

  listen 80;

  location / {

    root /usr/local/mapzen/whosonfirst-www/www;

    proxy_set_header       Authorization '';
    proxy_hide_header      Set-Cookie;
    proxy_ignore_headers   "Set-Cookie";

    add_header 'Access-Control-Allow-Origin' $acao_header;
    add_header 'Access-Control-Allow-Methods' 'GET';
  }

  location /data {

    if ($uri = "/data") {
      rewrite . /all-the-data.html last;
    }
    if ($uri = "/data/") {
      rewrite . /all-the-data.html last;
    }

    try_files $uri @data_s3;
  }

  location @data_s3 {

    proxy_http_version     1.1;
    proxy_set_header      Host 's3.amazonaws.com';
    proxy_set_header       Authorization '';
    proxy_hide_header      Set-Cookie;
    proxy_ignore_headers   "Set-Cookie";
    proxy_hide_header      'Content-Type';
    proxy_hide_header      x-amz-id-2;
    proxy_hide_header      x-amz-request-id;

    add_header 'Access-Control-Allow-Origin' $acao_header;
    add_header 'Access-Control-Allow-Methods' 'GET';

    # https://github.com/whosonfirst/whosonfirst-www-spelunker/issues/33
    add_header 'Content-Type' 'application/json';

    resolver 8.8.8.8;

    # Okay - see the way there is no '/' before '$uri' - that is like THE MOST
    # IMPORTANT THING EVAR. S3 simply doesn't know how to deal with URLs that
    # contain a '//' and will fail unceremoniously when confronted with one. So
    # don't do that, okay? It's really easy to do. Let me tell you about it some
    # day... (20160502/thisisaaronland)

    proxy_pass https://s3.amazonaws.com/whosonfirst.dev.mapzen.com$uri;

    # proxy_intercept_errors on;
    # recursive_error_pages on;
    # error_page 404 = @something_else;
  }

  # end of data stuff

}
