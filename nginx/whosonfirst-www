
# This was copied from whosonfirst-proxy, with most chunks commented out for now
# (20170606/dphiffer)

map $upstream_http_access_control_allow_origin $acao_header {
  "*"     "";
  default "*";
}

map $http_connection $upgrade_requested {
       default upgrade;
       ''      close;
}

# http://nginx.org/en/docs/http/ngx_http_upstream_module.html
# https://nginx.org/en/docs/http/load_balancing.html

#upstream upstream_boundaryissues {
#	 ip_hash;
#	 server 192.168.28.4:8080;
#}

#upstream upstream_photos {
#	 ip_hash;
#	 server 192.168.21.138:8080;
#}

#upstream upstream_places {
#	 ip_hash;
#	 server 192.168.24.66:7777;
#}

#upstream upstream_roundhoused {
#	 ip_hash;
#	 server 192.168.31.88:8080;
#}


#upstream upstream_webhooks {
#	 ip_hash;
#	 server 192.168.24.195:8080;
#}

#upstream upstream_staticmaps {
#	 ip_hash;
#	 server 192.168.19.123:6666;
#}

#server {
#       listen 8081;
#       rewrite ^(.*) https://$host$1 permanent;
#}

server {
  listen 80;

  # please fix me, yeah...
  # the "log_format" directive may be used only on "http" level in /etc/nginx/sites-enabled/wof-proxy:29

  #  log_format custom '[$time_local] '
  #                    '"$request" $status $body_bytes_sent '
  #                    '"$http_user_agent"';
  # access_log /var/log/nginx/wof-proxy-access.log custom;

  location / {
    rewrite ^/$ /index.html break;

    proxy_set_header       Authorization '';
    proxy_hide_header      Set-Cookie;
    proxy_ignore_headers   "Set-Cookie";

    add_header 'Access-Control-Allow-Origin' $acao_header;
    add_header 'Access-Control-Allow-Methods' 'GET';

    resolver 8.8.8.8;
    proxy_pass http://whosonfirst.dev.mapzen.com.s3-website-us-east-1.amazonaws.com$uri;

    # for debugging - you shouldn't normally need to enable this
    # rewrite .* http://whosonfirst.dev.mapzen.com.s3-website-us-east-1.amazonaws.com$uri;
  }

  # start of api stuff
  # chef-whosonfirst_api

#  location /api {
#
#    proxy_pass http://internal-whosonfirst-api-dev-995541387.us-east-1.elb.amazonaws.com;
#    proxy_set_header X-Proxy-Path "/api";
#
#    proxy_set_header Host $http_host;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Real-IP $remote_addr;
#  }

  # end of api stuff

  # start of whosonfirst-boundaryissues stuff
  # chef-whosonfirst_boundaryissues

#  location /boundaryissues {
#
#    proxy_pass http://upstream_boundaryissues/boundaryissues;
#    proxy_set_header Host $http_host;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Scheme $scheme;
#    proxy_set_header X-Proxy-Path /boundaryissues;		# this bit is important
#  }

  # end of whosonfirst-boundaryissues stuff

  # start of whosonfirst-photos stuff
  # chef-whosonfirst_photos

#  location /photos {
#    proxy_pass http://upstream_photos/photos;
#    proxy_set_header Host $http_host;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Scheme $scheme;
#    proxy_set_header X-Proxy-Path /photos;		# this bit is important
#  }

  # end of whosonfirst-photos stuff

  # start of places stuff - this is not really a who's on first thing but lives here for now (20161006/thisisaaronland)
  # chef-mapzen_photos

#  location /places {
#
#    proxy_pass http://upstream_places/places;
#    proxy_set_header Host $http_host;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Scheme $scheme;
#    proxy_set_header X-Proxy-Path /places;		# this bit is important
#  }

  # see also: https://github.com/whosonfirst/whosonfirst-sitemaps

#  location /places/sitemaps {
#
#    if ($uri ~* "^/places(.*)" ) {
#       set $rewrite $1;
#    }
#
#    if ($uri ~* "^/places/sitemaps/$" ) {
#       set $rewrite "/sitemaps/index.xml";
#    }
#
#    proxy_http_version     1.1;
#    proxy_set_header      Host 's3.amazonaws.com';
#    proxy_set_header       Authorization '';
#    proxy_hide_header      Set-Cookie;
#    proxy_ignore_headers   "Set-Cookie";
#    proxy_hide_header      'Content-Type';
#    proxy_hide_header      x-amz-id-2;
#    proxy_hide_header      x-amz-request-id;
#
#    add_header 'Access-Control-Allow-Origin' $acao_header;
#    add_header 'Access-Control-Allow-Methods' 'GET';
#
#    resolver 8.8.8.8;
#
    # Okay - see the way there is no '/' before '$uri' - that is like THE MOST
    # IMPORTANT THING EVAR. S3 simply doesn't know how to deal with URLs that
    # contain a '//' and will fail unceremoniously when confronted with one. So
    # don't do that, okay? It's really easy to do. Let me tell you about it some
    # day... (20160502/thisisaaronland)

#    proxy_pass https://s3.amazonaws.com/mapzen-places$rewrite;
#  }

  # end of places stuff

  # start of roundhoused stuff
  # chef-whosonfirst_roundhoused

#  location /id {
#
#    proxy_pass http://upstream_roundhoused;
#    proxy_set_header Host $http_host;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Scheme $scheme;
#  }

  # end of roundhoused stuff

  # start of spelunker stuff
  # chef-whosonfirst_spelunker

#  location /spelunker {
#
#    proxy_pass http://internal-whosonfirst-spelunker-dev-2092335310.us-east-1.elb.amazonaws.com:7777;
#    proxy_set_header Host $http_host;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Scheme $scheme;
#    proxy_set_header X-Proxy-Path /spelunker;		# this bit is important (tomorrow)
#    proxy_set_header X-Script-Name /spelunker;		# this bit is important (today)
#    		     					# https://github.com/whosonfirst/whosonfirst-www-spelunker/blob/master/www/server.py#L45
#    proxy_set_header X-Proxy-Host $http_host;
#  }

  # end of spelunker stuff


  # start of webhooks stuff
  # does not have chef hoohah yet (20161017/thisisaaronland)

#  location /wh {
#    proxy_pass http://upstream_webhooks;
#    proxy_set_header Host $http_host;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Scheme $scheme;
#  }

  # end of webhooks stuff

  # start of static maps stuff
  # see also: https://github.com/whosonfirst/go-whosonfirst-staticmap#wof-staticmapd
  # see also: https://github.com/mapzen/chef-whosonfirst_staticmaps

#  location /static {
#    try_files $uri @static_s3;
#  }

#  location @static_s3 {
#
#    proxy_http_version     1.1;
#    proxy_set_header      Host 's3.amazonaws.com';
#    proxy_set_header       Authorization '';
#    proxy_hide_header      Set-Cookie;
#    proxy_ignore_headers   "Set-Cookie";
#    proxy_hide_header      'Content-Type';
#    proxy_hide_header      x-amz-id-2;
#    proxy_hide_header      x-amz-request-id;
#
#    add_header 'Access-Control-Allow-Origin' $acao_header;
#    add_header 'Access-Control-Allow-Methods' 'GET';
#
#    add_header 'Content-Type' 'image/png';
#
#    resolver 8.8.8.8;

    # Okay - see the way there is no '/' before '$uri' - that is like THE MOST
    # IMPORTANT THING EVAR. S3 simply doesn't know how to deal with URLs that
    # contain a '//' and will fail unceremoniously when confronted with one. So
    # don't do that, okay? It's really easy to do. Let me tell you about it some
    # day... (20160502/thisisaaronland)

    # default hoohah

#    proxy_pass https://s3.amazonaws.com/whosonfirst.dev.mapzen.com$uri;

    # additional hoohah that we're not using but that I am leaving here for now
    # if only so I can remember how to do this kind of thing in the future...
    # (20170208/thisisaaronland)
    #
    # debugging	hoohah
    # rewrite           (.*)/(.*).png$ https://s3.amazonaws.com/whosonfirst.dev.mapzen.com$1/$2-320-240.png break;
    #
    # hardcoded image sizes hoohah
    # rewrite           (.*)/(.*).png$ /whosonfirst.dev.mapzen.com$1/$2-320-240.png break;
    # proxy_pass        https://s3.amazonaws.com;

#    proxy_intercept_errors on;
#    recursive_error_pages on;
#    error_page 404 = @static_render;
#  }

#  location @static_render {
#    rewrite           ^.*/([0-9]+)(-(.*))?.png$ /?id=$1&size=$3 break;		# this relies on the code interpretting '?size=' as '?size=default'
#    proxy_pass        http://upstream_staticmaps;
#    proxy_redirect    default;
#  }

  # end of static maps stuff

  # start of data stuff

  location /data {

    if ($uri = "/data") {
      rewrite . /all-the-data.html last;
    }
    if ($uri = "/data/") {
      rewrite . /all-the-data.html last;
    }

    try_files $uri @data_s3;
  }

  location @data_s3 {

    proxy_http_version     1.1;
    proxy_set_header      Host 's3.amazonaws.com';
    proxy_set_header       Authorization '';
    proxy_hide_header      Set-Cookie;
    proxy_ignore_headers   "Set-Cookie";
    proxy_hide_header      'Content-Type';
    proxy_hide_header      x-amz-id-2;
    proxy_hide_header      x-amz-request-id;

    add_header 'Access-Control-Allow-Origin' $acao_header;
    add_header 'Access-Control-Allow-Methods' 'GET';

    # https://github.com/whosonfirst/whosonfirst-www-spelunker/issues/33
    add_header 'Content-Type' 'application/json';

    resolver 8.8.8.8;

    # Okay - see the way there is no '/' before '$uri' - that is like THE MOST
    # IMPORTANT THING EVAR. S3 simply doesn't know how to deal with URLs that
    # contain a '//' and will fail unceremoniously when confronted with one. So
    # don't do that, okay? It's really easy to do. Let me tell you about it some
    # day... (20160502/thisisaaronland)

    proxy_pass https://s3.amazonaws.com/whosonfirst.dev.mapzen.com$uri;

    # proxy_intercept_errors on;
    # recursive_error_pages on;
    # error_page 404 = @something_else;
  }

  # end of data stuff

}
